
opdrachtenWeek2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000200  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ec  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b5  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036e  00000000  00000000  000015f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00001964  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048d  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000025b  00000000  00000000  00001f25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__vector_2>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	99 d0       	rcall	.+306    	; 0x1e6 <main>
  b4:	a3 c0       	rjmp	.+326    	; 0x1fc <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <intnul2>:
	DDRA = 0b11111111;
	PORTA = 1<<3;
}
void intnul2()
{
	if(PORTA != 1<<7){
  b8:	8b b3       	in	r24, 0x1b	; 27
  ba:	80 38       	cpi	r24, 0x80	; 128
  bc:	19 f0       	breq	.+6      	; 0xc4 <intnul2+0xc>
		PORTA = PORTA << 1;
  be:	8b b3       	in	r24, 0x1b	; 27
  c0:	88 0f       	add	r24, r24
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	08 95       	ret

000000c6 <__vector_2>:
	inteen2();
    //PORTD |= (1<<5);		
}

ISR( INT1_vect )
{
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	0b b6       	in	r0, 0x3b	; 59
  d2:	0f 92       	push	r0
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	4f 93       	push	r20
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	intnul2();
  ec:	e5 df       	rcall	.-54     	; 0xb8 <intnul2>
	
    //PORTD &= ~(1<<5);		
}
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	bf 91       	pop	r27
  f4:	af 91       	pop	r26
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	7f 91       	pop	r23
  fc:	6f 91       	pop	r22
  fe:	5f 91       	pop	r21
 100:	4f 91       	pop	r20
 102:	3f 91       	pop	r19
 104:	2f 91       	pop	r18
 106:	0f 90       	pop	r0
 108:	0b be       	out	0x3b, r0	; 59
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <inteen2>:
		PORTA = PORTA << 1;
	}
}
void inteen2()
{
	if(PORTA != 1){
 114:	8b b3       	in	r24, 0x1b	; 27
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	19 f0       	breq	.+6      	; 0x120 <inteen2+0xc>
		PORTA = PORTA >> 1;
 11a:	8b b3       	in	r24, 0x1b	; 27
 11c:	86 95       	lsr	r24
 11e:	8b bb       	out	0x1b, r24	; 27
 120:	08 95       	ret

00000122 <__vector_1>:

	return 1;
}

ISR( INT0_vect )
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	0b b6       	in	r0, 0x3b	; 59
 12e:	0f 92       	push	r0
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	inteen2();
 148:	e5 df       	rcall	.-54     	; 0x114 <inteen2>
    //PORTD |= (1<<5);		
}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0b be       	out	0x3b, r0	; 59
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <wait>:
}
//<
void wait( int ms )

{
	for (int i=0; i<ms; i++)
 170:	18 16       	cp	r1, r24
 172:	19 06       	cpc	r1, r25
 174:	6c f4       	brge	.+26     	; 0x190 <wait+0x20>
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	ef ec       	ldi	r30, 0xCF	; 207
 17c:	f7 e0       	ldi	r31, 0x07	; 7
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <wait+0xe>
 182:	00 c0       	rjmp	.+0      	; 0x184 <wait+0x14>
 184:	00 00       	nop
 186:	2f 5f       	subi	r18, 0xFF	; 255
 188:	3f 4f       	sbci	r19, 0xFF	; 255
 18a:	82 17       	cp	r24, r18
 18c:	93 07       	cpc	r25, r19
 18e:	a9 f7       	brne	.-22     	; 0x17a <wait+0xa>
 190:	08 95       	ret

00000192 <op4>:
	
    //PORTD &= ~(1<<5);		
}
//Op4>
void op4()
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	6b 97       	sbiw	r28, 0x1b	; 27
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
	typedef struct {
		unsigned char data;
		unsigned int delay ;
	} PATTERN_STRUCT;
	
	PATTERN_STRUCT pattern[] = {
 1a6:	8b e1       	ldi	r24, 0x1B	; 27
 1a8:	e0 e0       	ldi	r30, 0x00	; 0
 1aa:	f1 e0       	ldi	r31, 0x01	; 1
 1ac:	de 01       	movw	r26, r28
 1ae:	11 96       	adiw	r26, 0x01	; 1
 1b0:	01 90       	ld	r0, Z+
 1b2:	0d 92       	st	X+, r0
 1b4:	8a 95       	dec	r24
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <op4+0x1e>
		{0b01100000,40},

			
		{0x00, 0x00}
	};
	DDRA = 0b11111111;
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	8a bb       	out	0x1a, r24	; 26
	while (1)
	{
		
		int i = 0;
		
		while( pattern[i].delay != 0 ) {
 1bc:	8a 81       	ldd	r24, Y+2	; 0x02
 1be:	9b 81       	ldd	r25, Y+3	; 0x03
 1c0:	89 2b       	or	r24, r25
 1c2:	e1 f3       	breq	.-8      	; 0x1bc <op4+0x2a>
 1c4:	8e 01       	movw	r16, r28
 1c6:	0f 5f       	subi	r16, 0xFF	; 255
 1c8:	1f 4f       	sbci	r17, 0xFF	; 255
			PORTA = pattern[i].data;
 1ca:	f8 01       	movw	r30, r16
 1cc:	80 81       	ld	r24, Z
 1ce:	8b bb       	out	0x1b, r24	; 27
			
			wait(pattern[i].delay);
 1d0:	81 81       	ldd	r24, Z+1	; 0x01
 1d2:	92 81       	ldd	r25, Z+2	; 0x02
 1d4:	cd df       	rcall	.-102    	; 0x170 <wait>
 1d6:	0d 5f       	subi	r16, 0xFD	; 253
 1d8:	1f 4f       	sbci	r17, 0xFF	; 255
	while (1)
	{
		
		int i = 0;
		
		while( pattern[i].delay != 0 ) {
 1da:	f8 01       	movw	r30, r16
 1dc:	81 81       	ldd	r24, Z+1	; 0x01
 1de:	92 81       	ldd	r25, Z+2	; 0x02
 1e0:	89 2b       	or	r24, r25
 1e2:	99 f7       	brne	.-26     	; 0x1ca <op4+0x38>
 1e4:	eb cf       	rjmp	.-42     	; 0x1bc <op4+0x2a>

000001e6 <main>:
void wait( int ms );

int main( void )
{
	
	DDRD = 0xF0;
 1e6:	80 ef       	ldi	r24, 0xF0	; 240
 1e8:	81 bb       	out	0x11, r24	; 17

	EICRA |= 0x0B;			
 1ea:	ea e6       	ldi	r30, 0x6A	; 106
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	8b 60       	ori	r24, 0x0B	; 11
 1f2:	80 83       	st	Z, r24
	EIMSK |= 0x03;	
 1f4:	89 b7       	in	r24, 0x39	; 57
 1f6:	83 60       	ori	r24, 0x03	; 3
 1f8:	89 bf       	out	0x39, r24	; 57
			
	op4();
 1fa:	cb df       	rcall	.-106    	; 0x192 <op4>

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
