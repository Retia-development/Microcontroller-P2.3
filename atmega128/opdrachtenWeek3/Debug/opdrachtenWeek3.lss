
opdrachtenWeek3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000029a  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ef6  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a20  00000000  00000000  000012e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000575  00000000  00000000  00001d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  0000227c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a6  00000000  00000000  00002344  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005aa  00000000  00000000  000027ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002d94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e9       	ldi	r30, 0x9A	; 154
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	ef d0       	rcall	.+478    	; 0x292 <main>
  b4:	f0 c0       	rjmp	.+480    	; 0x296 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_command>:
	_delay_ms(25);
}

void lcd_command(unsigned char dat)
{
	PORTC = dat & 0xF0;		//hoge nibble
  b8:	98 2f       	mov	r25, r24
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x08;	//data
  be:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	ef e4       	ldi	r30, 0x4F	; 79
  c2:	f3 ec       	ldi	r31, 0xC3	; 195
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_command+0xc>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcd_command+0x12>
  ca:	00 00       	nop
	_delay_ms(25);
	PORTC = 0x04;			//stop
  cc:	94 e0       	ldi	r25, 0x04	; 4
  ce:	95 bb       	out	0x15, r25	; 21

	PORTC = (dat & 0x0F) <<4;	//lage nibble
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8f 9f       	mul	r24, r31
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x08;
  da:	ab 9a       	sbi	0x15, 3	; 21
  dc:	8f e4       	ldi	r24, 0x4F	; 79
  de:	93 ec       	ldi	r25, 0xC3	; 195
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_command+0x28>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_command+0x2e>
  e6:	00 00       	nop

	_delay_ms(25);
	PORTC =  0x00;
  e8:	15 ba       	out	0x15, r1	; 21
  ea:	08 95       	ret

000000ec <init_lcd>:
#include <avr/interrupt.h>

void init_lcd()
{
	//return home8
	DDRC = 0b11111111;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 bb       	out	0x14, r24	; 20
  f0:	8f e4       	ldi	r24, 0x4F	; 79
  f2:	93 ec       	ldi	r25, 0xC3	; 195
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <init_lcd+0x8>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <init_lcd+0xe>
  fa:	00 00       	nop
	_delay_ms(25);
	lcd_command(0x02);
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	db df       	rcall	.-74     	; 0xb8 <lcd_command>
 102:	8f e4       	ldi	r24, 0x4F	; 79
 104:	93 ec       	ldi	r25, 0xC3	; 195
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <init_lcd+0x1a>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <init_lcd+0x20>
 10c:	00 00       	nop
	_delay_ms(25);
	//mode: 4 bits interface data, 2 lines, 5x data
	lcd_command(0x28);
 10e:	88 e2       	ldi	r24, 0x28	; 40
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	d2 df       	rcall	.-92     	; 0xb8 <lcd_command>
 114:	8f e4       	ldi	r24, 0x4F	; 79
 116:	93 ec       	ldi	r25, 0xC3	; 195
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <init_lcd+0x2c>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <init_lcd+0x32>
 11e:	00 00       	nop
	_delay_ms(25);
	// display: on, cursor off, blinking off
	lcd_command( 0x0C );
 120:	8c e0       	ldi	r24, 0x0C	; 12
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	c9 df       	rcall	.-110    	; 0xb8 <lcd_command>
 126:	8f e4       	ldi	r24, 0x4F	; 79
 128:	93 ec       	ldi	r25, 0xC3	; 195
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <init_lcd+0x3e>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <init_lcd+0x44>
	_delay_ms(25);
	//entry mode: cursor to right no shift
	lcd_command(0x06);
 130:	00 00       	nop
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	c0 df       	rcall	.-128    	; 0xb8 <lcd_command>
 138:	8f e4       	ldi	r24, 0x4F	; 79
 13a:	93 ec       	ldi	r25, 0xC3	; 195
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <init_lcd+0x50>
 140:	00 c0       	rjmp	.+0      	; 0x142 <init_lcd+0x56>
	_delay_ms(25);
	//Ram adress: 0, first position, line 1
	lcd_command(0x80);
 142:	00 00       	nop
 144:	80 e8       	ldi	r24, 0x80	; 128
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	b7 df       	rcall	.-146    	; 0xb8 <lcd_command>
 14a:	8f e4       	ldi	r24, 0x4F	; 79
 14c:	93 ec       	ldi	r25, 0xC3	; 195
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <init_lcd+0x62>
 152:	00 c0       	rjmp	.+0      	; 0x154 <init_lcd+0x68>
	_delay_ms(25);
	lcd_command(0x01);
 154:	00 00       	nop
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	ae df       	rcall	.-164    	; 0xb8 <lcd_command>
 15c:	8f e4       	ldi	r24, 0x4F	; 79
 15e:	93 ec       	ldi	r25, 0xC3	; 195
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <init_lcd+0x74>
 164:	00 c0       	rjmp	.+0      	; 0x166 <init_lcd+0x7a>
 166:	00 00       	nop
 168:	08 95       	ret

0000016a <lcd_writeChar>:
	PORTC =  0x00;
}

void lcd_writeChar( unsigned char dat)
{
	PORTC = dat & 0xF0;
 16a:	98 2f       	mov	r25, r24
 16c:	90 7f       	andi	r25, 0xF0	; 240
 16e:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x0C;
 170:	95 b3       	in	r25, 0x15	; 21
 172:	9c 60       	ori	r25, 0x0C	; 12
 174:	95 bb       	out	0x15, r25	; 21
 176:	ef e4       	ldi	r30, 0x4F	; 79
 178:	f3 ec       	ldi	r31, 0xC3	; 195
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_writeChar+0x10>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcd_writeChar+0x16>
 180:	00 00       	nop

	_delay_ms(25);
	PORTC = 0x04;
 182:	94 e0       	ldi	r25, 0x04	; 4
 184:	95 bb       	out	0x15, r25	; 21

	PORTC = (dat & 0x0F) << 4;
 186:	f0 e1       	ldi	r31, 0x10	; 16
 188:	8f 9f       	mul	r24, r31
 18a:	c0 01       	movw	r24, r0
 18c:	11 24       	eor	r1, r1
 18e:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x0C;
 190:	85 b3       	in	r24, 0x15	; 21
 192:	8c 60       	ori	r24, 0x0C	; 12
 194:	85 bb       	out	0x15, r24	; 21
 196:	8f e4       	ldi	r24, 0x4F	; 79
 198:	93 ec       	ldi	r25, 0xC3	; 195
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_writeChar+0x30>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_writeChar+0x36>
 1a0:	00 00       	nop

	_delay_ms(25);
	PORTC = 0x00;
 1a2:	15 ba       	out	0x15, r1	; 21
 1a4:	08 95       	ret

000001a6 <lcd_setCursorPosition>:
}

void lcd_setCursorPosition(int position)
{
	char value;
	if(position >= 16)
 1a6:	80 31       	cpi	r24, 0x10	; 16
 1a8:	91 05       	cpc	r25, r1
 1aa:	1c f0       	brlt	.+6      	; 0x1b2 <lcd_setCursorPosition+0xc>
	{
		position = position - 16;
		value = 0xc0 + position;
		lcd_command(value);
 1ac:	80 55       	subi	r24, 0x50	; 80
 1ae:	84 cf       	rjmp	.-248    	; 0xb8 <lcd_command>
 1b0:	08 95       	ret
	}
	else
	{
		value = 0x80 + position;
		lcd_command(value);
 1b2:	80 58       	subi	r24, 0x80	; 128
 1b4:	81 cf       	rjmp	.-254    	; 0xb8 <lcd_command>
 1b6:	08 95       	ret

000001b8 <lcd_writeLine>:
	}
}

void lcd_writeLine( char text[], int line)
{
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	ec 01       	movw	r28, r24
	// eerst de eerste 8 karakters = regel 1
	// eerste pos regel 1
	if(line == 2)
 1c6:	62 30       	cpi	r22, 0x02	; 2
 1c8:	71 05       	cpc	r23, r1
 1ca:	b9 f4       	brne	.+46     	; 0x1fa <lcd_writeLine+0x42>
	{
		lcd_command(0xC0);
 1cc:	80 ec       	ldi	r24, 0xC0	; 192
 1ce:	74 df       	rcall	.-280    	; 0xb8 <lcd_command>
 1d0:	7e 01       	movw	r14, r28
		for (int i=0; i < strlen(text); i++) {
 1d2:	00 e0       	ldi	r16, 0x00	; 0
 1d4:	10 e0       	ldi	r17, 0x00	; 0
 1d6:	06 c0       	rjmp	.+12     	; 0x1e4 <lcd_writeLine+0x2c>
			lcd_writeChar( text[i] );
 1d8:	f7 01       	movw	r30, r14
 1da:	81 91       	ld	r24, Z+
 1dc:	7f 01       	movw	r14, r30
 1de:	c5 df       	rcall	.-118    	; 0x16a <lcd_writeChar>
	// eerst de eerste 8 karakters = regel 1
	// eerste pos regel 1
	if(line == 2)
	{
		lcd_command(0xC0);
		for (int i=0; i < strlen(text); i++) {
 1e0:	0f 5f       	subi	r16, 0xFF	; 255
 1e2:	1f 4f       	sbci	r17, 0xFF	; 255
 1e4:	fe 01       	movw	r30, r28
 1e6:	01 90       	ld	r0, Z+
 1e8:	00 20       	and	r0, r0
 1ea:	e9 f7       	brne	.-6      	; 0x1e6 <lcd_writeLine+0x2e>
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	ec 1b       	sub	r30, r28
 1f0:	fd 0b       	sbc	r31, r29
 1f2:	0e 17       	cp	r16, r30
 1f4:	1f 07       	cpc	r17, r31
 1f6:	80 f3       	brcs	.-32     	; 0x1d8 <lcd_writeLine+0x20>
			lcd_writeChar( text[i] );
		}
	}
	else
	{
		lcd_command(0x80);
 1f8:	16 c0       	rjmp	.+44     	; 0x226 <lcd_writeLine+0x6e>
 1fa:	80 e8       	ldi	r24, 0x80	; 128
 1fc:	5d df       	rcall	.-326    	; 0xb8 <lcd_command>
 1fe:	7e 01       	movw	r14, r28
		for (int i=0; i < strlen(text); i++) {
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	10 e0       	ldi	r17, 0x00	; 0
 204:	06 c0       	rjmp	.+12     	; 0x212 <lcd_writeLine+0x5a>
			lcd_writeChar( text[i] );
 206:	f7 01       	movw	r30, r14
 208:	81 91       	ld	r24, Z+
 20a:	7f 01       	movw	r14, r30
 20c:	ae df       	rcall	.-164    	; 0x16a <lcd_writeChar>
		}
	}
	else
	{
		lcd_command(0x80);
		for (int i=0; i < strlen(text); i++) {
 20e:	0f 5f       	subi	r16, 0xFF	; 255
 210:	1f 4f       	sbci	r17, 0xFF	; 255
 212:	fe 01       	movw	r30, r28
 214:	01 90       	ld	r0, Z+
 216:	00 20       	and	r0, r0
 218:	e9 f7       	brne	.-6      	; 0x214 <lcd_writeLine+0x5c>
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	ec 1b       	sub	r30, r28
 21e:	fd 0b       	sbc	r31, r29
 220:	0e 17       	cp	r16, r30
 222:	1f 07       	cpc	r17, r31
 224:	80 f3       	brcs	.-32     	; 0x206 <lcd_writeLine+0x4e>
			lcd_writeChar( text[i] );
		}
	}
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	08 95       	ret

00000234 <B1>:
	{
	}
}

void B1()
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	2b 97       	sbiw	r28, 0x0b	; 11
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
	char c[] = "positie 20";
 248:	8b e0       	ldi	r24, 0x0B	; 11
 24a:	e0 e0       	ldi	r30, 0x00	; 0
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	de 01       	movw	r26, r28
 250:	11 96       	adiw	r26, 0x01	; 1
 252:	01 90       	ld	r0, Z+
 254:	0d 92       	st	X+, r0
 256:	8a 95       	dec	r24
 258:	e1 f7       	brne	.-8      	; 0x252 <B1+0x1e>
	init_lcd();
 25a:	48 df       	rcall	.-368    	; 0xec <init_lcd>
 25c:	8f e4       	ldi	r24, 0x4F	; 79
 25e:	93 ec       	ldi	r25, 0xC3	; 195
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <B1+0x2c>
 264:	00 c0       	rjmp	.+0      	; 0x266 <B1+0x32>
 266:	00 00       	nop
	_delay_ms(25);
	
	lcd_command(0x01);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	26 df       	rcall	.-436    	; 0xb8 <lcd_command>
	lcd_writeLine(c, 1);
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	ce 01       	movw	r24, r28
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	a1 df       	rcall	.-190    	; 0x1b8 <lcd_writeLine>
	lcd_setCursorPosition(26);
 276:	8a e1       	ldi	r24, 0x1A	; 26
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	95 df       	rcall	.-214    	; 0x1a6 <lcd_setCursorPosition>
	lcd_writeChar('A');
 27c:	81 e4       	ldi	r24, 0x41	; 65
 27e:	75 df       	rcall	.-278    	; 0x16a <lcd_writeChar>
 280:	2b 96       	adiw	r28, 0x0b	; 11
	
}
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <main>:
 292:	d0 df       	rcall	.-96     	; 0x234 <B1>



int main (void)
{
	B1();
 294:	ff cf       	rjmp	.-2      	; 0x294 <main+0x2>

00000296 <_exit>:
 296:	f8 94       	cli

00000298 <__stop_program>:
 298:	ff cf       	rjmp	.-2      	; 0x298 <__stop_program>
