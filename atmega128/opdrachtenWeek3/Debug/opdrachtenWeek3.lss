
opdrachtenWeek3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d1b  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c0  00000000  00000000  00000f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c0  00000000  00000000  00001957  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00001f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bb  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000373  00000000  00000000  000024c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000283a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	47 d0       	rcall	.+142    	; 0x128 <main>
  9a:	4e c0       	rjmp	.+156    	; 0x138 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
{
PORTC |= (1<<LCD_E);	// E high
  9e:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	8f ec       	ldi	r24, 0xCF	; 207
  a2:	97 e0       	ldi	r25, 0x07	; 7
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_strobe_lcd_e+0x6>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcd_strobe_lcd_e+0xc>
  aa:	00 00       	nop
_delay_ms(1);			// nodig
PORTC &= ~(1<<LCD_E);  	// E low
  ac:	ab 98       	cbi	0x15, 3	; 21
  ae:	8f ec       	ldi	r24, 0xCF	; 207
  b0:	97 e0       	ldi	r25, 0x07	; 7
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcd_strobe_lcd_e+0x14>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <lcd_strobe_lcd_e+0x1a>
  b8:	00 00       	nop
  ba:	08 95       	ret

000000bc <lcd_command>:
	lcd_command( 0x80 );
}

void lcd_command ( unsigned char dat )
{
	PORTC = dat & 0xF0;			// hoge nibble
  bc:	98 2f       	mov	r25, r24
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x08;			// data (RS=0),										// start (EN=1)
  c2:	ab 9a       	sbi	0x15, 3	; 21
  c4:	ef ec       	ldi	r30, 0xCF	; 207
  c6:	f7 e0       	ldi	r31, 0x07	; 7
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <lcd_command+0xc>
  cc:	00 c0       	rjmp	.+0      	; 0xce <lcd_command+0x12>
  ce:	00 00       	nop
	_delay_ms(1);					// wait 1 ms
	PORTC = 0x04;					// stop (EN = 0)
  d0:	94 e0       	ldi	r25, 0x04	; 4
  d2:	95 bb       	out	0x15, r25	; 21
	
	PORTC = (dat & 0x0F) << 4;	// lage nibble
  d4:	f0 e1       	ldi	r31, 0x10	; 16
  d6:	8f 9f       	mul	r24, r31
  d8:	c0 01       	movw	r24, r0
  da:	11 24       	eor	r1, r1
  dc:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x08;			// data (RS=0),										// start (EN=1)
  de:	ab 9a       	sbi	0x15, 3	; 21
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	97 e0       	ldi	r25, 0x07	; 7
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcd_command+0x28>
  e8:	00 c0       	rjmp	.+0      	; 0xea <lcd_command+0x2e>
  ea:	00 00       	nop
	_delay_ms(1);					// wait 1 ms
	PORTC = 0x00;					// stop 										// (EN=0 RS=0)
  ec:	15 ba       	out	0x15, r1	; 21
  ee:	08 95       	ret

000000f0 <init_lcd>:
}

void init_lcd(void)
{
	// return home
	lcd_command( 0x02 );
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	e3 df       	rcall	.-58     	; 0xbc <lcd_command>
	// mode: 4 bits interface data, 2 lines, 5x8 dots
	lcd_command( 0x28 );
  f6:	88 e2       	ldi	r24, 0x28	; 40
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	e0 df       	rcall	.-64     	; 0xbc <lcd_command>
	// display: on, cursor off, blinking off
	lcd_command( 0x0C );
  fc:	8c e0       	ldi	r24, 0x0C	; 12
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	dd df       	rcall	.-70     	; 0xbc <lcd_command>
	// entry mode: cursor to right, no shift
	lcd_command( 0x06 );
 102:	86 e0       	ldi	r24, 0x06	; 6
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	da df       	rcall	.-76     	; 0xbc <lcd_command>
	// RAM adress: 0, first position, line 1
	lcd_command( 0x80 );
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	d7 cf       	rjmp	.-82     	; 0xbc <lcd_command>
 10e:	08 95       	ret

00000110 <lcd_data>:
 110:	cf 93       	push	r28
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
{
 112:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 114:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 116:	aa 9a       	sbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 118:	c2 df       	rcall	.-124    	; 0x9e <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 11a:	c2 95       	swap	r28
 11c:	c0 7f       	andi	r28, 0xF0	; 240
 11e:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
 120:	aa 9a       	sbi	0x15, 2	; 21
 122:	bd df       	rcall	.-134    	; 0x9e <lcd_strobe_lcd_e>
}
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <main>:

#define LCD_E 	3
#define LCD_RS	2

int main(void){
	DDRC = 0b11111111;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11111111;
 12c:	81 bb       	out	0x11, r24	; 17

	init_lcd();
 12e:	e0 df       	rcall	.-64     	; 0xf0 <init_lcd>
	lcd_data(0b00110001);
 130:	81 e3       	ldi	r24, 0x31	; 49
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	ed df       	rcall	.-38     	; 0x110 <lcd_data>
 136:	ff cf       	rjmp	.-2      	; 0x136 <main+0xe>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
