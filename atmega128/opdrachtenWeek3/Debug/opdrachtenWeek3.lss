
opdrachtenWeek3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000188  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad0  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092d  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a0  00000000  00000000  000016ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a3  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000142  00000000  00000000  00001f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000020cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	5c c0       	rjmp	.+184    	; 0xde <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 30       	cpi	r26, 0x03	; 3
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5f d0       	rcall	.+190    	; 0x182 <main>
  c4:	5f c0       	rjmp	.+190    	; 0x184 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <timer2Init>:
	}
}

void timer2Init( void )
{
	OCR2 = 250;				// Compare value of counter 2
  c8:	8a ef       	ldi	r24, 0xFA	; 250
  ca:	83 bd       	out	0x23, r24	; 35
	TIMSK |= BIT(7);		// T2 compare match interrupt enable
  cc:	87 b7       	in	r24, 0x37	; 55
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	87 bf       	out	0x37, r24	; 55
	SREG |= BIT(7);			// turn_on intr all
  d2:	8f b7       	in	r24, 0x3f	; 63
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	8f bf       	out	0x3f, r24	; 63
	TCCR2 = 0b00001011;		// Initialize T2: timer, prescaler=32,
  d8:	8b e0       	ldi	r24, 0x0B	; 11
  da:	85 bd       	out	0x25, r24	; 37
  dc:	08 95       	ret

000000de <__vector_9>:
	// compare output disconnected,CTC,RUN
}

ISR( TIMER2_COMP_vect )
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
	msCount++; // Increment ms counter
  ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <msCount>
  f0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <msCount+0x1>
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <msCount+0x1>
  fa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <msCount>
	if ( msCount == 25 && isOn == 0)
  fe:	89 31       	cpi	r24, 0x19	; 25
 100:	91 05       	cpc	r25, r1
 102:	79 f4       	brne	.+30     	; 0x122 <__vector_9+0x44>
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 108:	81 11       	cpse	r24, r1
 10a:	1a c0       	rjmp	.+52     	; 0x140 <__vector_9+0x62>
	{
		isOn = 1;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
		PORTD ^= BIT(7); // Toggle bit 7 van PORTD
 112:	82 b3       	in	r24, 0x12	; 18
 114:	80 58       	subi	r24, 0x80	; 128
 116:	82 bb       	out	0x12, r24	; 18
		msCount = 0; // Reset ms_count value
 118:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <msCount+0x1>
 11c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <msCount>
 120:	0f c0       	rjmp	.+30     	; 0x140 <__vector_9+0x62>
	}
	else if(msCount == 15 && isOn == 1) 
 122:	0f 97       	sbiw	r24, 0x0f	; 15
 124:	69 f4       	brne	.+26     	; 0x140 <__vector_9+0x62>
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	49 f4       	brne	.+18     	; 0x140 <__vector_9+0x62>
	{
		isOn = 0;
 12e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
		PORTD ^= BIT(7); // Toggle bit 7 van PORTD
 132:	82 b3       	in	r24, 0x12	; 18
 134:	80 58       	subi	r24, 0x80	; 128
 136:	82 bb       	out	0x12, r24	; 18
		msCount = 0; // Reset ms_count value
 138:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <msCount+0x1>
 13c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <msCount>
	}
}
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <wait>:

void wait( int ms )
{
	for (int i=0; i<ms; i++)
 14e:	18 16       	cp	r1, r24
 150:	19 06       	cpc	r1, r25
 152:	6c f4       	brge	.+26     	; 0x16e <wait+0x20>
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	ef ec       	ldi	r30, 0xCF	; 207
 15a:	f7 e0       	ldi	r31, 0x07	; 7
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <wait+0xe>
 160:	00 c0       	rjmp	.+0      	; 0x162 <wait+0x14>
 162:	00 00       	nop
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	82 17       	cp	r24, r18
 16a:	93 07       	cpc	r25, r19
 16c:	a9 f7       	brne	.-22     	; 0x158 <wait+0xa>
 16e:	08 95       	ret

00000170 <B3>:
	
}

B3()
{
	TCCR2 = 0b00001011;
 170:	8b e0       	ldi	r24, 0x0B	; 11
 172:	85 bd       	out	0x25, r24	; 37
	// T2: timer, prescaler=32,
	// compare output disconnected, CTC, RUN
	
	DDRD = 0xFF; // set PORTC for output (toggle PC0)
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	81 bb       	out	0x11, r24	; 17
	timer2Init();
 178:	a7 df       	rcall	.-178    	; 0xc8 <timer2Init>
	while (1)
	{
		// do something else
		wait(1000); // every 10 ms (busy waiting
 17a:	88 ee       	ldi	r24, 0xE8	; 232
 17c:	93 e0       	ldi	r25, 0x03	; 3
 17e:	e7 df       	rcall	.-50     	; 0x14e <wait>
 180:	fc cf       	rjmp	.-8      	; 0x17a <B3+0xa>

00000182 <main>:
int msCount = 0;
char isOn = 0;

int main (void)
{
	B3();
 182:	f6 df       	rcall	.-20     	; 0x170 <B3>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
