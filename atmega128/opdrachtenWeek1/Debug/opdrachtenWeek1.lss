
opdrachtenWeek1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d27  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000965  00000000  00000000  00000fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b4  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b9  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000393  00000000  00000000  00002571  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002904  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e5       	ldi	r30, 0x5E	; 94
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	52 d0       	rcall	.+164    	; 0x158 <main>
  b4:	52 c0       	rjmp	.+164    	; 0x15a <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <setCharliePlexingLed>:
			cycle = 0;
		}
		
		cycle++;
		wait(1);
	}
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	91 05       	cpc	r25, r1
  bc:	c1 f0       	breq	.+48     	; 0xee <setCharliePlexingLed+0x36>
  be:	34 f4       	brge	.+12     	; 0xcc <setCharliePlexingLed+0x14>
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	91 05       	cpc	r25, r1
  c4:	51 f0       	breq	.+20     	; 0xda <setCharliePlexingLed+0x22>
  c6:	02 97       	sbiw	r24, 0x02	; 2
  c8:	69 f0       	breq	.+26     	; 0xe4 <setCharliePlexingLed+0x2c>
  ca:	08 95       	ret
  cc:	85 30       	cpi	r24, 0x05	; 5
  ce:	91 05       	cpc	r25, r1
  d0:	c1 f0       	breq	.+48     	; 0x102 <setCharliePlexingLed+0x4a>
  d2:	94 f0       	brlt	.+36     	; 0xf8 <setCharliePlexingLed+0x40>
  d4:	06 97       	sbiw	r24, 0x06	; 6
  d6:	d1 f0       	breq	.+52     	; 0x10c <setCharliePlexingLed+0x54>
  d8:	08 95       	ret
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	85 bb       	out	0x15, r24	; 21
  de:	8b ef       	ldi	r24, 0xFB	; 251
  e0:	84 bb       	out	0x14, r24	; 20
  e2:	08 95       	ret
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	85 bb       	out	0x15, r24	; 21
  e8:	8b ef       	ldi	r24, 0xFB	; 251
  ea:	84 bb       	out	0x14, r24	; 20
  ec:	08 95       	ret
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	85 bb       	out	0x15, r24	; 21
  f2:	8e ef       	ldi	r24, 0xFE	; 254
  f4:	84 bb       	out	0x14, r24	; 20
  f6:	08 95       	ret
  f8:	84 e0       	ldi	r24, 0x04	; 4
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	8e ef       	ldi	r24, 0xFE	; 254
  fe:	84 bb       	out	0x14, r24	; 20
 100:	08 95       	ret
 102:	84 e0       	ldi	r24, 0x04	; 4
 104:	85 bb       	out	0x15, r24	; 21
 106:	8d ef       	ldi	r24, 0xFD	; 253
 108:	84 bb       	out	0x14, r24	; 20
 10a:	08 95       	ret
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	85 bb       	out	0x15, r24	; 21
 110:	8d ef       	ldi	r24, 0xFD	; 253
 112:	84 bb       	out	0x14, r24	; 20
 114:	08 95       	ret

00000116 <wait>:
 116:	18 16       	cp	r1, r24
 118:	19 06       	cpc	r1, r25
 11a:	6c f4       	brge	.+26     	; 0x136 <wait+0x20>
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	ef ec       	ldi	r30, 0xCF	; 207
 122:	f7 e0       	ldi	r31, 0x07	; 7
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <wait+0xe>
 128:	00 c0       	rjmp	.+0      	; 0x12a <wait+0x14>
 12a:	00 00       	nop
 12c:	2f 5f       	subi	r18, 0xFF	; 255
 12e:	3f 4f       	sbci	r19, 0xFF	; 255
 130:	82 17       	cp	r24, r18
 132:	93 07       	cpc	r25, r19
 134:	a9 f7       	brne	.-22     	; 0x120 <wait+0xa>
 136:	08 95       	ret

00000138 <B7>:
void B7()
{
	char i = 1;
	while(1)
	{
		setCharliePlexingLed(i);
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	bd df       	rcall	.-134    	; 0xb8 <setCharliePlexingLed>
		i = i << 1;
 13e:	c2 e0       	ldi	r28, 0x02	; 2
 140:	01 c0       	rjmp	.+2      	; 0x144 <B7+0xc>
		if(i == 0x40) i = i >> 6;
 142:	c1 e0       	ldi	r28, 0x01	; 1
		wait(500);
 144:	84 ef       	ldi	r24, 0xF4	; 244
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	e6 df       	rcall	.-52     	; 0x116 <wait>
void B7()
{
	char i = 1;
	while(1)
	{
		setCharliePlexingLed(i);
 14a:	8c 2f       	mov	r24, r28
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	b4 df       	rcall	.-152    	; 0xb8 <setCharliePlexingLed>
		i = i << 1;
 150:	cc 0f       	add	r28, r28
		if(i == 0x40) i = i >> 6;
 152:	c0 34       	cpi	r28, 0x40	; 64
 154:	b9 f7       	brne	.-18     	; 0x144 <B7+0xc>
 156:	f5 cf       	rjmp	.-22     	; 0x142 <B7+0xa>

00000158 <main>:
#include <util/delay.h>
#define BIT(x) (1<<(x))

int main(void)
{
	B7();
 158:	ef df       	rcall	.-34     	; 0x138 <B7>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
