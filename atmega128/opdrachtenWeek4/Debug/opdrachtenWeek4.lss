
opdrachtenWeek4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000936  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000867  00000000  00000000  00000b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f4  00000000  00000000  000013f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000016e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000444  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006a  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001bda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	18 d0       	rcall	.+48     	; 0xca <main>
  9a:	61 c0       	rjmp	.+194    	; 0x15e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <adcInit>:
	}
}

void adcInit( void )
{
	ADMUX = 0b11100001;			// AREF=VCC, result left adjusted, channel1 at pin PF1
  9e:	81 ee       	ldi	r24, 0xE1	; 225
  a0:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110;		// ADC-enable, no interrupt, start, free running, division by 64
  a2:	86 e8       	ldi	r24, 0x86	; 134
  a4:	86 b9       	out	0x06, r24	; 6
  a6:	08 95       	ret

000000a8 <wait>:
}

void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
  a8:	18 16       	cp	r1, r24
  aa:	19 06       	cpc	r1, r25
  ac:	6c f4       	brge	.+26     	; 0xc8 <wait+0x20>
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	ef ec       	ldi	r30, 0xCF	; 207
  b4:	f7 e0       	ldi	r31, 0x07	; 7
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <wait+0xe>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <wait+0x14>
  bc:	00 00       	nop
  be:	2f 5f       	subi	r18, 0xFF	; 255
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	82 17       	cp	r24, r18
  c4:	93 07       	cpc	r25, r19
  c6:	a9 f7       	brne	.-22     	; 0xb2 <wait+0xa>
  c8:	08 95       	ret

000000ca <main>:

#define BIT(x)	(1 << (x))

int main()
{
	DDRF = 0x00;				// set PORTF for input (ADC)
  ca:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA = 0xFF;				// set PORTA for output
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8a bb       	out	0x1a, r24	; 26
	
	DDRD = 0xFF;
  d2:	81 bb       	out	0x11, r24	; 17
	adcInit();					// initialize ADC
  d4:	e4 df       	rcall	.-56     	; 0x9e <adcInit>
	while (1)
	{
		ADCSRA |= BIT(6);				// Start ADC
		while ( ADCSRA & BIT(6) ) ;		// Wait for completion
		PORTA = ADCH;					// Show MSB (bit 9:2) of ADC
		PORTD = ~(255 << (int)((PORTA*8)/255));
  d6:	cf ef       	ldi	r28, 0xFF	; 255
  d8:	d0 e0       	ldi	r29, 0x00	; 0
	DDRD = 0xFF;
	adcInit();					// initialize ADC

	while (1)
	{
		ADCSRA |= BIT(6);				// Start ADC
  da:	36 9a       	sbi	0x06, 6	; 6
		while ( ADCSRA & BIT(6) ) ;		// Wait for completion
  dc:	36 99       	sbic	0x06, 6	; 6
  de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x12>
		PORTA = ADCH;					// Show MSB (bit 9:2) of ADC
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	8b bb       	out	0x1b, r24	; 27
		PORTD = ~(255 << (int)((PORTA*8)/255));
  e4:	8b b3       	in	r24, 0x1b	; 27
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	be 01       	movw	r22, r28
  f6:	0c d0       	rcall	.+24     	; 0x110 <__divmodhi4>
  f8:	ce 01       	movw	r24, r28
  fa:	02 c0       	rjmp	.+4      	; 0x100 <main+0x36>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <main+0x32>
 104:	80 95       	com	r24
 106:	82 bb       	out	0x12, r24	; 18
		wait(500);						// every 50 ms (busy waiting)
 108:	84 ef       	ldi	r24, 0xF4	; 244
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	cd df       	rcall	.-102    	; 0xa8 <wait>
		
		
		
	}
 10e:	e5 cf       	rjmp	.-54     	; 0xda <main+0x10>

00000110 <__divmodhi4>:
 110:	97 fb       	bst	r25, 7
 112:	07 2e       	mov	r0, r23
 114:	16 f4       	brtc	.+4      	; 0x11a <__divmodhi4+0xa>
 116:	00 94       	com	r0
 118:	06 d0       	rcall	.+12     	; 0x126 <__divmodhi4_neg1>
 11a:	77 fd       	sbrc	r23, 7
 11c:	08 d0       	rcall	.+16     	; 0x12e <__divmodhi4_neg2>
 11e:	0b d0       	rcall	.+22     	; 0x136 <__udivmodhi4>
 120:	07 fc       	sbrc	r0, 7
 122:	05 d0       	rcall	.+10     	; 0x12e <__divmodhi4_neg2>
 124:	3e f4       	brtc	.+14     	; 0x134 <__divmodhi4_exit>

00000126 <__divmodhi4_neg1>:
 126:	90 95       	com	r25
 128:	81 95       	neg	r24
 12a:	9f 4f       	sbci	r25, 0xFF	; 255
 12c:	08 95       	ret

0000012e <__divmodhi4_neg2>:
 12e:	70 95       	com	r23
 130:	61 95       	neg	r22
 132:	7f 4f       	sbci	r23, 0xFF	; 255

00000134 <__divmodhi4_exit>:
 134:	08 95       	ret

00000136 <__udivmodhi4>:
 136:	aa 1b       	sub	r26, r26
 138:	bb 1b       	sub	r27, r27
 13a:	51 e1       	ldi	r21, 0x11	; 17
 13c:	07 c0       	rjmp	.+14     	; 0x14c <__udivmodhi4_ep>

0000013e <__udivmodhi4_loop>:
 13e:	aa 1f       	adc	r26, r26
 140:	bb 1f       	adc	r27, r27
 142:	a6 17       	cp	r26, r22
 144:	b7 07       	cpc	r27, r23
 146:	10 f0       	brcs	.+4      	; 0x14c <__udivmodhi4_ep>
 148:	a6 1b       	sub	r26, r22
 14a:	b7 0b       	sbc	r27, r23

0000014c <__udivmodhi4_ep>:
 14c:	88 1f       	adc	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	5a 95       	dec	r21
 152:	a9 f7       	brne	.-22     	; 0x13e <__udivmodhi4_loop>
 154:	80 95       	com	r24
 156:	90 95       	com	r25
 158:	bc 01       	movw	r22, r24
 15a:	cd 01       	movw	r24, r26
 15c:	08 95       	ret

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
